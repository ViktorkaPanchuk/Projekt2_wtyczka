# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Wtyczka_KS_VPDialog
                                 A QGIS plugin
 Wtyczka, która liczy różnicę wysokości i pole powierzchni.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-09
        git sha              : $Format:%H$
        copyright            : (C) 2023 by KS_VP
        email                : VPanchuk3005.02@ukr.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject, QgsDistanceArea
from qgis.core import QgsGeometry
from qgis.core import QgsProject, QgsDistanceArea, QgsCoordinateReferenceSystem


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Wtyczka_KS_VP_dialog_base.ui'))


class Wtyczka_KS_VPDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Wtyczka_KS_VPDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.calculateHeightButton.clicked.connect(self.roznica_wysokosci)
        self.PoleButton.clicked.connect(self.pole)

        # Utwórz listę warstw i ustaw ją jako opcje w ComboBox
        self.warstwy = QgsProject.instance().mapLayers().values()
        for warstwa in self.warstwy:
            self.WyborWarstwyComboBox.addItem(warstwa.name())

    def roznica_wysokosci(self):
        wybrana_warstwa = self.WyborWarstwyComboBox.currentText()

        # Znajdź warstwę o wybranej nazwie
        warstwa = None
        for warstwa_ in self.warstwy:
            if warstwa_.name() == wybrana_warstwa:
                warstwa = warstwa_
                break

        if warstwa is None:
            self.WysokoscWynik.setText("Warstwa o podanej nazwie nie istnieje.")
            return

        # Sprawdź, czy dokonano wyboru 2 punktów na warstwie
        punkty = warstwa.selectedFeatures()
        if len(punkty) != 2:
            self.WysokoscWynik.setText("Wybierz 2 punkty na warstwie.")
            return

        # Oblicz różnicę wysokości
        pkt1 = punkty[0]
        pkt2 = punkty[1]
        wysokosc1 = pkt1.attribute("zcoord")
        wysokosc2 = pkt2.attribute("zcoord")
        roznica = wysokosc1 - wysokosc2
        roznica = round(roznica, 4)
        self.WysokoscWynik.setText(
            f"Różnica wysokości między punktami {', '.join(str(pkt.id()) for pkt in punkty)} wynosi: {roznica} m")
        #Różnica wysokości między punktami o numerachPKT1,PKT2wynosi:WYNIK[m]”);
        

# ...

    def pole(self):
        wybrana_warstwa = self.WyborWarstwyComboBox.currentText()

        # Znajdź warstwę o wybranej nazwie
        warstwa = None
        for warstwa_ in self.warstwy:
            if warstwa_.name() == wybrana_warstwa:
                warstwa = warstwa_
                break

        if warstwa is None:
            self.PoleWynik.setText("Warstwa o podanej nazwie nie istnieje.")
            return

        # Sprawdź, czy dokonano wyboru co najmniej 3 punktów na warstwie
        punkty = warstwa.selectedFeatures()
        if len(punkty) < 3:
            self.PoleWynik.setText("Wybierz co najmniej 3 punkty na warstwie.")
            return

        # Utwórz listę współrzędnych x i y zaznaczonych punktów
        x_points = [pkt.geometry().asPoint()[0] for pkt in punkty]
        y_points = [pkt.geometry().asPoint()[1] for pkt in punkty]

        # Dodaj pierwszy punkt na koniec list, aby zamknąć figurę
        x_points.append(x_points[0])
        y_points.append(y_points[0])

        # Oblicz pole na podstawie współrzędnych punktów (metoda Gaussa)
        field_area = 0.0
        n = len(punkty)
        for i in range(n):
            field_area += (x_points[i] * y_points[i + 1] - x_points[i + 1] * y_points[i])

        field_area = abs(field_area) / 2.0
        field_area = round(field_area, 4)

        if len(punkty) > 4:
            message = f"Pole powierzchni punktów {', '.join(str(pkt.id()) for pkt in punkty)} wynosi: {field_area} m^2"
            self.show_message_box(message)
        else:
            self.PoleWynik.setText(
                f"Pole powierzchni {', '.join(str(pkt.id()) for pkt in punkty)} wynosi: {field_area} m^2")

    def show_message_box(self, message):
        message_box = QtWidgets.QMessageBox()
        message_box.setText(message)
        message_box.setWindowTitle("Wynik")
        message_box.setStandardButtons(QtWidgets.QMessageBox.Ok)
        message_box.exec_()
#####

